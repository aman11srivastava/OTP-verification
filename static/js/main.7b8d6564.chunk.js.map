{"version":3,"sources":["firebase.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","handleClick","recaptcha","auth","RecaptchaVerifier","signInWithPhoneNumber","then","e","code","prompt","confirm","result","console","log","user","document","querySelector","textContent","phoneNumber","catch","error","id","onClick","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"wPAYAA,IAASC,cAVM,CACXC,OAAQ,0CACRC,WAAY,yCACZC,YAAa,gDACbC,UAAW,yBACXC,cAAe,qCACfC,kBAAmB,eACnBC,MAAO,8CAIIR,QAAf,ECkBeS,EA7Bf,4MACEC,YAAc,WACZ,IAAIC,EAAY,IAAIX,EAASY,KAAKC,kBAAkB,aAEpDb,EAASY,OAAOE,sBADH,gBACiCH,GAAWI,MAAM,SAASC,GACtE,IAAIC,EAAOC,OAAO,gBAAiB,IACrB,OAATD,GACHD,EAAEG,QAAQF,GAAMF,MAAK,SAAUK,GAC3BC,QAAQC,IAAIF,EAAOG,MACnBC,SAASC,cAAc,SAASC,aAAiBN,EAAOG,KAAKI,YAAc,yCAC5EC,OAAM,SAAUC,GACfR,QAAQQ,MAAOA,SAGtBD,OAAM,SAAUC,GACbR,QAAQQ,MAAOA,OAfvB,uDAmBI,OACE,6BACE,gCACA,yBAAKC,GAAG,cACR,4BAAQC,QAASC,KAAKtB,aAAtB,8BAvBR,GAAyBuB,aCULC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFjB,SAASkB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdnB,OAAM,SAAAC,GACLR,QAAQQ,MAAMA,EAAMmB,c","file":"static/js/main.7b8d6564.chunk.js","sourcesContent":["import firebase from 'firebase'\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyBnWMfchmK4ScWSlJrRmoeZQU_N7ghcVW4\",\r\n    authDomain: \"otp-verification-7c853.firebaseapp.com\",\r\n    databaseURL: \"https://otp-verification-7c853.firebaseio.com\",\r\n    projectId: \"otp-verification-7c853\",\r\n    storageBucket: \"otp-verification-7c853.appspot.com\",\r\n    messagingSenderId: \"253702378401\",\r\n    appId: \"1:253702378401:web:6fcb2accd33f13747c71e0\"\r\n}\r\n\r\nfirebase.initializeApp(config);\r\nexport default firebase\r\n","import React, { Component } from 'react'\nimport firebase from './firebase'\nexport class App extends Component {\n  handleClick = () => {\n    let recaptcha = new firebase.auth.RecaptchaVerifier('recaptcha');\n    let number = '+918130321587';\n    firebase.auth().signInWithPhoneNumber(number, recaptcha).then( function(e) {\n      let code = prompt('Enter the OTP', '');\n        if(code === null) return;\n        e.confirm(code).then(function (result) {\n            console.log(result.user);\n            document.querySelector('label').textContent +=   result.user.phoneNumber + \"Mobile Number verified Successfully\";\n        }).catch(function (error) {\n            console.error( error);\n        });\n    })\n    .catch(function (error) {\n        console.error( error);\n    });\n  }\n  render() {\n    return (\n      <div>\n        <label></label>\n        <div id=\"recaptcha\"></div>\n        <button onClick={this.handleClick}>Click to generate OTP</button>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}